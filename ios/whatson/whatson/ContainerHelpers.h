//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/utils/ContainerHelpers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ContainerHelpers")
#ifdef RESTRICT_ContainerHelpers
#define INCLUDE_ALL_ContainerHelpers 0
#else
#define INCLUDE_ALL_ContainerHelpers 1
#endif
#undef RESTRICT_ContainerHelpers

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (UkCoAmlcurranSocialUtilsContainerHelpers_) && (INCLUDE_ALL_ContainerHelpers || defined(INCLUDE_UkCoAmlcurranSocialUtilsContainerHelpers))
#define UkCoAmlcurranSocialUtilsContainerHelpers_

@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;

@interface UkCoAmlcurranSocialUtilsContainerHelpers : NSObject
@property (readonly, class) IOSIntArray *EMPTY_INTS NS_SWIFT_NAME(EMPTY_INTS);
@property (readonly, class) IOSLongArray *EMPTY_LONGS NS_SWIFT_NAME(EMPTY_LONGS);
@property (readonly, class) IOSObjectArray *EMPTY_OBJECTS NS_SWIFT_NAME(EMPTY_OBJECTS);

+ (IOSIntArray *)EMPTY_INTS;

+ (IOSLongArray *)EMPTY_LONGS;

+ (IOSObjectArray *)EMPTY_OBJECTS;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)equalWithId:(id)a
                 withId:(id)b;

+ (jint)idealByteArraySizeWithInt:(jint)need;

+ (jint)idealIntArraySizeWithInt:(jint)need;

+ (jint)idealLongArraySizeWithInt:(jint)need;

#pragma mark Package-Private

+ (jint)binarySearchWithIntArray:(IOSIntArray *)array
                         withInt:(jint)size
                         withInt:(jint)value;

+ (jint)binarySearchWithLongArray:(IOSLongArray *)array
                          withInt:(jint)size
                         withLong:(jlong)value;

@end

J2OBJC_STATIC_INIT(UkCoAmlcurranSocialUtilsContainerHelpers)

inline IOSIntArray *UkCoAmlcurranSocialUtilsContainerHelpers_get_EMPTY_INTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *UkCoAmlcurranSocialUtilsContainerHelpers_EMPTY_INTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(UkCoAmlcurranSocialUtilsContainerHelpers, EMPTY_INTS, IOSIntArray *)

inline IOSLongArray *UkCoAmlcurranSocialUtilsContainerHelpers_get_EMPTY_LONGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *UkCoAmlcurranSocialUtilsContainerHelpers_EMPTY_LONGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(UkCoAmlcurranSocialUtilsContainerHelpers, EMPTY_LONGS, IOSLongArray *)

inline IOSObjectArray *UkCoAmlcurranSocialUtilsContainerHelpers_get_EMPTY_OBJECTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *UkCoAmlcurranSocialUtilsContainerHelpers_EMPTY_OBJECTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(UkCoAmlcurranSocialUtilsContainerHelpers, EMPTY_OBJECTS, IOSObjectArray *)

FOUNDATION_EXPORT void UkCoAmlcurranSocialUtilsContainerHelpers_init(UkCoAmlcurranSocialUtilsContainerHelpers *self);

FOUNDATION_EXPORT UkCoAmlcurranSocialUtilsContainerHelpers *new_UkCoAmlcurranSocialUtilsContainerHelpers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT UkCoAmlcurranSocialUtilsContainerHelpers *create_UkCoAmlcurranSocialUtilsContainerHelpers_init(void);

FOUNDATION_EXPORT jint UkCoAmlcurranSocialUtilsContainerHelpers_idealIntArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint UkCoAmlcurranSocialUtilsContainerHelpers_idealLongArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint UkCoAmlcurranSocialUtilsContainerHelpers_idealByteArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jboolean UkCoAmlcurranSocialUtilsContainerHelpers_equalWithId_withId_(id a, id b);

FOUNDATION_EXPORT jint UkCoAmlcurranSocialUtilsContainerHelpers_binarySearchWithIntArray_withInt_withInt_(IOSIntArray *array, jint size, jint value);

FOUNDATION_EXPORT jint UkCoAmlcurranSocialUtilsContainerHelpers_binarySearchWithLongArray_withInt_withLong_(IOSLongArray *array, jint size, jlong value);

J2OBJC_TYPE_LITERAL_HEADER(UkCoAmlcurranSocialUtilsContainerHelpers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ContainerHelpers")
