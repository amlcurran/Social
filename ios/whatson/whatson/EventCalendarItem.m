//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/EventCalendarItem.java
//

#include "EventCalendarItem.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Timestamp.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

@interface SCEventCalendarItem () {
 @public
  NSString *eventId_;
  NSString *title_;
  SCTimestamp *start_;
  SCTimestamp *endTime_;
}

@end

J2OBJC_FIELD_SETTER(SCEventCalendarItem, eventId_, NSString *)
J2OBJC_FIELD_SETTER(SCEventCalendarItem, title_, NSString *)
J2OBJC_FIELD_SETTER(SCEventCalendarItem, start_, SCTimestamp *)
J2OBJC_FIELD_SETTER(SCEventCalendarItem, endTime_, SCTimestamp *)

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

@implementation SCEventCalendarItem

- (instancetype)initWithNSString:(NSString *)eventId
                    withNSString:(NSString *)title
                 withSCTimestamp:(SCTimestamp *)time
                 withSCTimestamp:(SCTimestamp *)endTime {
  SCEventCalendarItem_initWithNSString_withNSString_withSCTimestamp_withSCTimestamp_(self, eventId, title, time, endTime);
  return self;
}

- (NSString *)id__ {
  return eventId_;
}

- (NSString * __nonnull)title {
  return title_;
}

- (SCTimestamp * __nonnull)startTime {
  return start_;
}

- (SCTimestamp * __nonnull)endTime {
  return endTime_;
}

- (jboolean)isEmpty {
  return false;
}

+ (IOSObjectArray *)__annotations_title {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_startTime {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_endTime {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withSCTimestamp:withSCTimestamp:", "EventCalendarItem", NULL, 0x1, NULL, NULL },
    { "id__", "id", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "title", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "startTime", NULL, "Luk.co.amlcurran.social.Timestamp;", 0x1, NULL, NULL },
    { "endTime", NULL, "Luk.co.amlcurran.social.Timestamp;", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "eventId_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "title_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "start_", NULL, 0x12, "Luk.co.amlcurran.social.Timestamp;", NULL, NULL, .constantValue.asLong = 0 },
    { "endTime_", NULL, 0x12, "Luk.co.amlcurran.social.Timestamp;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _SCEventCalendarItem = { 2, "EventCalendarItem", "uk.co.amlcurran.social", NULL, 0x0, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_SCEventCalendarItem;
}

@end

void SCEventCalendarItem_initWithNSString_withNSString_withSCTimestamp_withSCTimestamp_(SCEventCalendarItem *self, NSString *eventId, NSString *title, SCTimestamp *time, SCTimestamp *endTime) {
  NSObject_init(self);
  self->eventId_ = eventId;
  self->title_ = title;
  self->start_ = time;
  self->endTime_ = endTime;
}

SCEventCalendarItem *new_SCEventCalendarItem_initWithNSString_withNSString_withSCTimestamp_withSCTimestamp_(NSString *eventId, NSString *title, SCTimestamp *time, SCTimestamp *endTime) {
  SCEventCalendarItem *self = [SCEventCalendarItem alloc];
  SCEventCalendarItem_initWithNSString_withNSString_withSCTimestamp_withSCTimestamp_(self, eventId, title, time, endTime);
  return self;
}

SCEventCalendarItem *create_SCEventCalendarItem_initWithNSString_withNSString_withSCTimestamp_withSCTimestamp_(NSString *eventId, NSString *title, SCTimestamp *time, SCTimestamp *endTime) {
  return new_SCEventCalendarItem_initWithNSString_withNSString_withSCTimestamp_withSCTimestamp_(eventId, title, time, endTime);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCEventCalendarItem)
