//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/CalendarSource.java
//

#include "CalendarItem.h"
#include "CalendarSlot.h"
#include "CalendarSource.h"
#include "EmptyCalendarItem.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "SCTime.h"
#include "TimeRepository.h"

@interface SCCalendarSource () {
 @public
  id<SCTimeRepository> timeRepository_;
  UkCoAmlcurranSocialCoreSparseArray *calendarItems_;
  jint daysSize_;
}

- (id<SCTime>)startOfTodayBlockWithInt:(jint)position;

- (id<SCTime>)endOfTodayBlockWithInt:(jint)position;

@end

J2OBJC_FIELD_SETTER(SCCalendarSource, timeRepository_, id<SCTimeRepository>)
J2OBJC_FIELD_SETTER(SCCalendarSource, calendarItems_, UkCoAmlcurranSocialCoreSparseArray *)

__attribute__((unused)) static id<SCTime> SCCalendarSource_startOfTodayBlockWithInt_(SCCalendarSource *self, jint position);

__attribute__((unused)) static id<SCTime> SCCalendarSource_endOfTodayBlockWithInt_(SCCalendarSource *self, jint position);

@implementation SCCalendarSource

- (instancetype)initWithSCTimeRepository:(id<SCTimeRepository>)timeRepository
  withUkCoAmlcurranSocialCoreSparseArray:(UkCoAmlcurranSocialCoreSparseArray *)calendarItems
                                 withInt:(jint)daysSize {
  SCCalendarSource_initWithSCTimeRepository_withUkCoAmlcurranSocialCoreSparseArray_withInt_(self, timeRepository, calendarItems, daysSize);
  return self;
}

- (jint)count {
  return daysSize_;
}

- (id<SCCalendarItem>)itemAtWithInt:(jint)position {
  SCCalendarSlot *calendarSlot = [((UkCoAmlcurranSocialCoreSparseArray *) nil_chk(calendarItems_)) getWithInt:position];
  if (calendarSlot == nil || [calendarSlot isEmpty]) {
    id<SCTime> startTime = SCCalendarSource_startOfTodayBlockWithInt_(self, position);
    id<SCTime> endTime = SCCalendarSource_endOfTodayBlockWithInt_(self, position);
    return new_SCEmptyCalendarItem_initWithSCTime_withSCTime_(startTime, endTime);
  }
  return [((SCCalendarSlot *) nil_chk(calendarSlot)) firstItem];
}

- (id<SCTime>)startOfTodayBlockWithInt:(jint)position {
  return SCCalendarSource_startOfTodayBlockWithInt_(self, position);
}

- (id<SCTime>)endOfTodayBlockWithInt:(jint)position {
  return SCCalendarSource_endOfTodayBlockWithInt_(self, position);
}

- (SCCalendarSlot *)slotAtWithInt:(jint)position {
  return [((UkCoAmlcurranSocialCoreSparseArray *) nil_chk(calendarItems_)) getWithInt:position];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithSCTimeRepository:withUkCoAmlcurranSocialCoreSparseArray:withInt:", "CalendarSource", NULL, 0x1, NULL, NULL },
    { "count", NULL, "I", 0x1, NULL, NULL },
    { "itemAtWithInt:", "itemAt", "Luk.co.amlcurran.social.CalendarItem;", 0x1, NULL, NULL },
    { "startOfTodayBlockWithInt:", "startOfTodayBlock", "Luk.co.amlcurran.social.Time;", 0x2, NULL, NULL },
    { "endOfTodayBlockWithInt:", "endOfTodayBlock", "Luk.co.amlcurran.social.Time;", 0x2, NULL, NULL },
    { "slotAtWithInt:", "slotAt", "Luk.co.amlcurran.social.CalendarSlot;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "timeRepository_", NULL, 0x12, "Luk.co.amlcurran.social.TimeRepository;", NULL, NULL, .constantValue.asLong = 0 },
    { "calendarItems_", NULL, 0x12, "Luk.co.amlcurran.social.core.SparseArray;", NULL, "Luk/co/amlcurran/social/core/SparseArray<Luk/co/amlcurran/social/CalendarSlot;>;", .constantValue.asLong = 0 },
    { "daysSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _SCCalendarSource = { 2, "CalendarSource", "uk.co.amlcurran.social", NULL, 0x0, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_SCCalendarSource;
}

@end

void SCCalendarSource_initWithSCTimeRepository_withUkCoAmlcurranSocialCoreSparseArray_withInt_(SCCalendarSource *self, id<SCTimeRepository> timeRepository, UkCoAmlcurranSocialCoreSparseArray *calendarItems, jint daysSize) {
  (void) NSObject_init(self);
  self->timeRepository_ = timeRepository;
  self->calendarItems_ = calendarItems;
  self->daysSize_ = daysSize;
}

SCCalendarSource *new_SCCalendarSource_initWithSCTimeRepository_withUkCoAmlcurranSocialCoreSparseArray_withInt_(id<SCTimeRepository> timeRepository, UkCoAmlcurranSocialCoreSparseArray *calendarItems, jint daysSize) {
  SCCalendarSource *self = [SCCalendarSource alloc];
  SCCalendarSource_initWithSCTimeRepository_withUkCoAmlcurranSocialCoreSparseArray_withInt_(self, timeRepository, calendarItems, daysSize);
  return self;
}

id<SCTime> SCCalendarSource_startOfTodayBlockWithInt_(SCCalendarSource *self, jint position) {
  return [((id<SCTime>) nil_chk([((id<SCTime>) nil_chk([((id<SCTimeRepository>) nil_chk(self->timeRepository_)) startOfToday])) plusDaysWithInt:position])) plusHoursWithInt:17];
}

id<SCTime> SCCalendarSource_endOfTodayBlockWithInt_(SCCalendarSource *self, jint position) {
  return [((id<SCTime>) nil_chk([((id<SCTime>) nil_chk([((id<SCTimeRepository>) nil_chk(self->timeRepository_)) startOfToday])) plusDaysWithInt:position])) plusHoursWithInt:23];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCCalendarSource)
