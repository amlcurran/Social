//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/CalendarSource.java
//

#include "CalendarItem.h"
#include "CalendarSlot.h"
#include "CalendarSource.h"
#include "EmptyCalendarItem.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "TimeCalculator.h"
#include "Timestamp.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/Nullable.h"
#include "javax/annotation/meta/When.h"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

@interface SCCalendarSource () {
 @public
  UkCoAmlcurranSocialCoreSparseArray *calendarItems_;
  jint daysSize_;
  id<SCTimeCalculator> timeCalculator_;
}

- (SCTimestamp * __nonnull)startOfTodayBlockWithInt:(jint)position;

- (SCTimestamp * __nonnull)endOfTodayBlockWithInt:(jint)position;

@end

J2OBJC_FIELD_SETTER(SCCalendarSource, calendarItems_, UkCoAmlcurranSocialCoreSparseArray *)
J2OBJC_FIELD_SETTER(SCCalendarSource, timeCalculator_, id<SCTimeCalculator>)

__attribute__((unused)) static SCTimestamp *SCCalendarSource_startOfTodayBlockWithInt_(SCCalendarSource *self, jint position);

__attribute__((unused)) static SCTimestamp *SCCalendarSource_endOfTodayBlockWithInt_(SCCalendarSource *self, jint position);

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

@implementation SCCalendarSource

- (instancetype)initWithUkCoAmlcurranSocialCoreSparseArray:(UkCoAmlcurranSocialCoreSparseArray *)calendarItems
                                                   withInt:(jint)daysSize
                                      withSCTimeCalculator:(id<SCTimeCalculator>)timeCalculator {
  SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(self, calendarItems, daysSize, timeCalculator);
  return self;
}

- (jint)count {
  return daysSize_;
}

- (id<SCCalendarItem> __nullable)itemAtWithInt:(jint)position {
  SCCalendarSlot *calendarSlot = [((UkCoAmlcurranSocialCoreSparseArray *) nil_chk(calendarItems_)) getWithInt:position];
  if (calendarSlot == nil || [calendarSlot isEmpty]) {
    SCTimestamp *startTime = SCCalendarSource_startOfTodayBlockWithInt_(self, position);
    SCTimestamp *endTime = SCCalendarSource_endOfTodayBlockWithInt_(self, position);
    return new_SCEmptyCalendarItem_initWithSCTimestamp_withSCTimestamp_(startTime, endTime);
  }
  return [((SCCalendarSlot *) nil_chk(calendarSlot)) firstItem];
}

- (SCTimestamp * __nonnull)startOfTodayBlockWithInt:(jint)position {
  return SCCalendarSource_startOfTodayBlockWithInt_(self, position);
}

- (SCTimestamp * __nonnull)endOfTodayBlockWithInt:(jint)position {
  return SCCalendarSource_endOfTodayBlockWithInt_(self, position);
}

- (SCCalendarSlot * __nonnull)slotAtWithInt:(jint)position {
  return [((UkCoAmlcurranSocialCoreSparseArray *) nil_chk(calendarItems_)) getWithInt:position withId:new_SCCalendarSlot_init()];
}

- (jboolean)isEmptySlotWithInt:(jint)position {
  return [((SCCalendarSlot *) nil_chk([self slotAtWithInt:position])) isEmpty];
}

+ (IOSObjectArray *)__annotations_itemAtWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNullable alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_startOfTodayBlockWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_endOfTodayBlockWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_slotAtWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithUkCoAmlcurranSocialCoreSparseArray:withInt:withSCTimeCalculator:", "CalendarSource", NULL, 0x1, NULL, "(Luk/co/amlcurran/social/core/SparseArray<Luk/co/amlcurran/social/CalendarSlot;>;ILuk/co/amlcurran/social/TimeCalculator;)V" },
    { "count", NULL, "I", 0x1, NULL, NULL },
    { "itemAtWithInt:", "itemAt", "Luk.co.amlcurran.social.CalendarItem;", 0x1, NULL, NULL },
    { "startOfTodayBlockWithInt:", "startOfTodayBlock", "Luk.co.amlcurran.social.Timestamp;", 0x2, NULL, NULL },
    { "endOfTodayBlockWithInt:", "endOfTodayBlock", "Luk.co.amlcurran.social.Timestamp;", 0x2, NULL, NULL },
    { "slotAtWithInt:", "slotAt", "Luk.co.amlcurran.social.CalendarSlot;", 0x1, NULL, NULL },
    { "isEmptySlotWithInt:", "isEmptySlot", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "calendarItems_", NULL, 0x12, "Luk.co.amlcurran.social.core.SparseArray;", NULL, "Luk/co/amlcurran/social/core/SparseArray<Luk/co/amlcurran/social/CalendarSlot;>;", .constantValue.asLong = 0 },
    { "daysSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "timeCalculator_", NULL, 0x12, "Luk.co.amlcurran.social.TimeCalculator;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _SCCalendarSource = { 2, "CalendarSource", "uk.co.amlcurran.social", NULL, 0x0, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_SCCalendarSource;
}

@end

void SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(SCCalendarSource *self, UkCoAmlcurranSocialCoreSparseArray *calendarItems, jint daysSize, id<SCTimeCalculator> timeCalculator) {
  NSObject_init(self);
  self->calendarItems_ = calendarItems;
  self->daysSize_ = daysSize;
  self->timeCalculator_ = timeCalculator;
}

SCCalendarSource *new_SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(UkCoAmlcurranSocialCoreSparseArray *calendarItems, jint daysSize, id<SCTimeCalculator> timeCalculator) {
  SCCalendarSource *self = [SCCalendarSource alloc];
  SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(self, calendarItems, daysSize, timeCalculator);
  return self;
}

SCCalendarSource *create_SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(UkCoAmlcurranSocialCoreSparseArray *calendarItems, jint daysSize, id<SCTimeCalculator> timeCalculator) {
  return new_SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(calendarItems, daysSize, timeCalculator);
}

SCTimestamp *SCCalendarSource_startOfTodayBlockWithInt_(SCCalendarSource *self, jint position) {
  return [((SCTimestamp *) nil_chk([((SCTimestamp *) nil_chk([((id<SCTimeCalculator>) nil_chk(self->timeCalculator_)) startOfToday])) plusDaysWithInt:position])) plusHoursWithInt:17];
}

SCTimestamp *SCCalendarSource_endOfTodayBlockWithInt_(SCCalendarSource *self, jint position) {
  return [((SCTimestamp *) nil_chk([((SCTimestamp *) nil_chk([((id<SCTimeCalculator>) nil_chk(self->timeCalculator_)) startOfToday])) plusDaysWithInt:position])) plusHoursWithInt:23];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCCalendarSource)
