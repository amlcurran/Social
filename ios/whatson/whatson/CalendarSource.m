//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/CalendarSource.java
//

#include "CalendarItem.h"
#include "CalendarSlot.h"
#include "CalendarSource.h"
#include "EmptyCalendarItem.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "TimeCalculator.h"
#include "TimeOfDay.h"
#include "TimeRepository.h"
#include "Timestamp.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/Nullable.h"
#include "javax/annotation/meta/When.h"

@interface SCCalendarSource () {
 @public
  UkCoAmlcurranSocialUtilsSparseArray *calendarItems_;
  jint daysSize_;
  id<SCTimeCalculator> timeCalculator_;
  id<SCTimeRepository> timeRepository_;
}

- (SCTimestamp *)startOfTodayBlockWithInt:(jint)position;

- (SCTimestamp *)endOfTodayBlockWithInt:(jint)position;

@end

J2OBJC_FIELD_SETTER(SCCalendarSource, calendarItems_, UkCoAmlcurranSocialUtilsSparseArray *)
J2OBJC_FIELD_SETTER(SCCalendarSource, timeCalculator_, id<SCTimeCalculator>)
J2OBJC_FIELD_SETTER(SCCalendarSource, timeRepository_, id<SCTimeRepository>)

__attribute__((unused)) static SCTimestamp *SCCalendarSource_startOfTodayBlockWithInt_(SCCalendarSource *self, jint position);

__attribute__((unused)) static SCTimestamp *SCCalendarSource_endOfTodayBlockWithInt_(SCCalendarSource *self, jint position);

__attribute__((unused)) static IOSObjectArray *SCCalendarSource__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *SCCalendarSource__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *SCCalendarSource__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *SCCalendarSource__Annotations$3(void);

@implementation SCCalendarSource

- (instancetype)initWithUkCoAmlcurranSocialUtilsSparseArray:(UkCoAmlcurranSocialUtilsSparseArray *)calendarItems
                                                    withInt:(jint)daysSize
                                       withSCTimeCalculator:(id<SCTimeCalculator>)timeCalculator
                                       withSCTimeRepository:(id<SCTimeRepository>)timeRepository {
  SCCalendarSource_initWithUkCoAmlcurranSocialUtilsSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_(self, calendarItems, daysSize, timeCalculator, timeRepository);
  return self;
}

- (jint)count {
  return daysSize_;
}

- (id<SCCalendarItem>)itemAtWithInt:(jint)position {
  SCCalendarSlot *calendarSlot = [((UkCoAmlcurranSocialUtilsSparseArray *) nil_chk(calendarItems_)) getWithInt:position];
  if (calendarSlot == nil || [calendarSlot isEmpty]) {
    SCTimestamp *startTime = SCCalendarSource_startOfTodayBlockWithInt_(self, position);
    SCTimestamp *endTime = SCCalendarSource_endOfTodayBlockWithInt_(self, position);
    return new_SCEmptyCalendarItem_initWithSCTimestamp_withSCTimestamp_(startTime, endTime);
  }
  return [calendarSlot firstItem];
}

- (SCTimestamp *)startOfTodayBlockWithInt:(jint)position {
  return SCCalendarSource_startOfTodayBlockWithInt_(self, position);
}

- (SCTimestamp *)endOfTodayBlockWithInt:(jint)position {
  return SCCalendarSource_endOfTodayBlockWithInt_(self, position);
}

- (SCCalendarSlot *)slotAtWithInt:(jint)position {
  return [((UkCoAmlcurranSocialUtilsSparseArray *) nil_chk(calendarItems_)) getWithInt:position withId:new_SCCalendarSlot_init()];
}

- (jboolean)isEmptySlotWithInt:(jint)position {
  return [((SCCalendarSlot *) nil_chk([self slotAtWithInt:position])) isEmpty];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSCCalendarItem;", 0x1, 2, 3, -1, -1, 4, -1 },
    { NULL, "LSCTimestamp;", 0x2, 5, 3, -1, -1, 6, -1 },
    { NULL, "LSCTimestamp;", 0x2, 7, 3, -1, -1, 8, -1 },
    { NULL, "LSCCalendarSlot;", 0x1, 9, 3, -1, -1, 10, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithUkCoAmlcurranSocialUtilsSparseArray:withInt:withSCTimeCalculator:withSCTimeRepository:);
  methods[1].selector = @selector(count);
  methods[2].selector = @selector(itemAtWithInt:);
  methods[3].selector = @selector(startOfTodayBlockWithInt:);
  methods[4].selector = @selector(endOfTodayBlockWithInt:);
  methods[5].selector = @selector(slotAtWithInt:);
  methods[6].selector = @selector(isEmptySlotWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "calendarItems_", "LUkCoAmlcurranSocialUtilsSparseArray;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "daysSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeCalculator_", "LSCTimeCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeRepository_", "LSCTimeRepository;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LUkCoAmlcurranSocialUtilsSparseArray;ILSCTimeCalculator;LSCTimeRepository;", "(Luk/co/amlcurran/social/utils/SparseArray<Luk/co/amlcurran/social/CalendarSlot;>;ILuk/co/amlcurran/social/TimeCalculator;Luk/co/amlcurran/social/TimeRepository;)V", "itemAt", "I", (void *)&SCCalendarSource__Annotations$0, "startOfTodayBlock", (void *)&SCCalendarSource__Annotations$1, "endOfTodayBlock", (void *)&SCCalendarSource__Annotations$2, "slotAt", (void *)&SCCalendarSource__Annotations$3, "isEmptySlot", "Luk/co/amlcurran/social/utils/SparseArray<Luk/co/amlcurran/social/CalendarSlot;>;" };
  static const J2ObjcClassInfo _SCCalendarSource = { "CalendarSource", "uk.co.amlcurran.social", ptrTable, methods, fields, 7, 0x0, 7, 4, -1, -1, -1, -1, -1 };
  return &_SCCalendarSource;
}

@end

void SCCalendarSource_initWithUkCoAmlcurranSocialUtilsSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_(SCCalendarSource *self, UkCoAmlcurranSocialUtilsSparseArray *calendarItems, jint daysSize, id<SCTimeCalculator> timeCalculator, id<SCTimeRepository> timeRepository) {
  NSObject_init(self);
  self->calendarItems_ = calendarItems;
  self->daysSize_ = daysSize;
  self->timeCalculator_ = timeCalculator;
  self->timeRepository_ = timeRepository;
}

SCCalendarSource *new_SCCalendarSource_initWithUkCoAmlcurranSocialUtilsSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_(UkCoAmlcurranSocialUtilsSparseArray *calendarItems, jint daysSize, id<SCTimeCalculator> timeCalculator, id<SCTimeRepository> timeRepository) {
  J2OBJC_NEW_IMPL(SCCalendarSource, initWithUkCoAmlcurranSocialUtilsSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_, calendarItems, daysSize, timeCalculator, timeRepository)
}

SCCalendarSource *create_SCCalendarSource_initWithUkCoAmlcurranSocialUtilsSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_(UkCoAmlcurranSocialUtilsSparseArray *calendarItems, jint daysSize, id<SCTimeCalculator> timeCalculator, id<SCTimeRepository> timeRepository) {
  J2OBJC_CREATE_IMPL(SCCalendarSource, initWithUkCoAmlcurranSocialUtilsSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_, calendarItems, daysSize, timeCalculator, timeRepository)
}

SCTimestamp *SCCalendarSource_startOfTodayBlockWithInt_(SCCalendarSource *self, jint position) {
  return [((SCTimestamp *) nil_chk([((SCTimestamp *) nil_chk([((id<SCTimeCalculator>) nil_chk(self->timeCalculator_)) startOfToday])) plusDaysWithInt:position])) plusHoursOfWithSCTimeOfDay:[((id<SCTimeRepository>) nil_chk(self->timeRepository_)) borderTimeStart]];
}

SCTimestamp *SCCalendarSource_endOfTodayBlockWithInt_(SCCalendarSource *self, jint position) {
  return [((SCTimestamp *) nil_chk([((SCTimestamp *) nil_chk([((id<SCTimeCalculator>) nil_chk(self->timeCalculator_)) startOfToday])) plusDaysWithInt:position])) plusHoursOfWithSCTimeOfDay:[((id<SCTimeRepository>) nil_chk(self->timeRepository_)) borderTimeEnd]];
}

IOSObjectArray *SCCalendarSource__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SCCalendarSource__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SCCalendarSource__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SCCalendarSource__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCCalendarSource)
