//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/core/ContainerHelpers.java
//

#include "ContainerHelpers.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"

J2OBJC_INITIALIZED_DEFN(UkCoAmlcurranSocialCoreContainerHelpers)

IOSIntArray *UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_INTS;
IOSLongArray *UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_LONGS;
IOSObjectArray *UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_OBJECTS;

@implementation UkCoAmlcurranSocialCoreContainerHelpers

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  UkCoAmlcurranSocialCoreContainerHelpers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)idealIntArraySizeWithInt:(jint)need {
  return UkCoAmlcurranSocialCoreContainerHelpers_idealIntArraySizeWithInt_(need);
}

+ (jint)idealLongArraySizeWithInt:(jint)need {
  return UkCoAmlcurranSocialCoreContainerHelpers_idealLongArraySizeWithInt_(need);
}

+ (jint)idealByteArraySizeWithInt:(jint)need {
  return UkCoAmlcurranSocialCoreContainerHelpers_idealByteArraySizeWithInt_(need);
}

+ (jboolean)equalWithId:(id)a
                 withId:(id)b {
  return UkCoAmlcurranSocialCoreContainerHelpers_equalWithId_withId_(a, b);
}

+ (jint)binarySearchWithIntArray:(IOSIntArray *)array
                         withInt:(jint)size
                         withInt:(jint)value {
  return UkCoAmlcurranSocialCoreContainerHelpers_binarySearchWithIntArray_withInt_withInt_(array, size, value);
}

+ (jint)binarySearchWithLongArray:(IOSLongArray *)array
                          withInt:(jint)size
                         withLong:(jlong)value {
  return UkCoAmlcurranSocialCoreContainerHelpers_binarySearchWithLongArray_withInt_withLong_(array, size, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 6, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(idealIntArraySizeWithInt:);
  methods[2].selector = @selector(idealLongArraySizeWithInt:);
  methods[3].selector = @selector(idealByteArraySizeWithInt:);
  methods[4].selector = @selector(equalWithId:withId:);
  methods[5].selector = @selector(binarySearchWithIntArray:withInt:withInt:);
  methods[6].selector = @selector(binarySearchWithLongArray:withInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_INTS", "[I", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
    { "EMPTY_LONGS", "[J", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "EMPTY_OBJECTS", "[LNSObject;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "idealIntArraySize", "I", "idealLongArraySize", "idealByteArraySize", "equal", "LNSObject;LNSObject;", "binarySearch", "[III", "[JIJ", &UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_INTS, &UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_LONGS, &UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_OBJECTS };
  static const J2ObjcClassInfo _UkCoAmlcurranSocialCoreContainerHelpers = { "ContainerHelpers", "uk.co.amlcurran.social.core", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_UkCoAmlcurranSocialCoreContainerHelpers;
}

+ (void)initialize {
  if (self == [UkCoAmlcurranSocialCoreContainerHelpers class]) {
    UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_INTS = [IOSIntArray newArrayWithLength:0];
    UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_LONGS = [IOSLongArray newArrayWithLength:0];
    UkCoAmlcurranSocialCoreContainerHelpers_EMPTY_OBJECTS = [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()];
    J2OBJC_SET_INITIALIZED(UkCoAmlcurranSocialCoreContainerHelpers)
  }
}

@end

void UkCoAmlcurranSocialCoreContainerHelpers_init(UkCoAmlcurranSocialCoreContainerHelpers *self) {
  NSObject_init(self);
}

UkCoAmlcurranSocialCoreContainerHelpers *new_UkCoAmlcurranSocialCoreContainerHelpers_init() {
  J2OBJC_NEW_IMPL(UkCoAmlcurranSocialCoreContainerHelpers, init)
}

UkCoAmlcurranSocialCoreContainerHelpers *create_UkCoAmlcurranSocialCoreContainerHelpers_init() {
  J2OBJC_CREATE_IMPL(UkCoAmlcurranSocialCoreContainerHelpers, init)
}

jint UkCoAmlcurranSocialCoreContainerHelpers_idealIntArraySizeWithInt_(jint need) {
  UkCoAmlcurranSocialCoreContainerHelpers_initialize();
  return UkCoAmlcurranSocialCoreContainerHelpers_idealByteArraySizeWithInt_(need * 4) / 4;
}

jint UkCoAmlcurranSocialCoreContainerHelpers_idealLongArraySizeWithInt_(jint need) {
  UkCoAmlcurranSocialCoreContainerHelpers_initialize();
  return UkCoAmlcurranSocialCoreContainerHelpers_idealByteArraySizeWithInt_(need * 8) / 8;
}

jint UkCoAmlcurranSocialCoreContainerHelpers_idealByteArraySizeWithInt_(jint need) {
  UkCoAmlcurranSocialCoreContainerHelpers_initialize();
  for (jint i = 4; i < 32; i++) if (need <= (JreLShift32(1, i)) - 12) return (JreLShift32(1, i)) - 12;
  return need;
}

jboolean UkCoAmlcurranSocialCoreContainerHelpers_equalWithId_withId_(id a, id b) {
  UkCoAmlcurranSocialCoreContainerHelpers_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

jint UkCoAmlcurranSocialCoreContainerHelpers_binarySearchWithIntArray_withInt_withInt_(IOSIntArray *array, jint size, jint value) {
  UkCoAmlcurranSocialCoreContainerHelpers_initialize();
  jint lo = 0;
  jint hi = size - 1;
  while (lo <= hi) {
    jint mid = JreURShift32((lo + hi), 1);
    jint midVal = IOSIntArray_Get(nil_chk(array), mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

jint UkCoAmlcurranSocialCoreContainerHelpers_binarySearchWithLongArray_withInt_withLong_(IOSLongArray *array, jint size, jlong value) {
  UkCoAmlcurranSocialCoreContainerHelpers_initialize();
  jint lo = 0;
  jint hi = size - 1;
  while (lo <= hi) {
    jint mid = JreURShift32((lo + hi), 1);
    jlong midVal = IOSLongArray_Get(nil_chk(array), mid);
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(UkCoAmlcurranSocialCoreContainerHelpers)
