//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/Timestamp.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "TimeCalculator.h"
#include "Timestamp.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"

@interface SCTimestamp () {
 @public
  id<SCTimeCalculator> timeCalculator_;
  jlong millis_;
}

@end

J2OBJC_FIELD_SETTER(SCTimestamp, timeCalculator_, id<SCTimeCalculator>)

__attribute__((unused)) static IOSObjectArray *SCTimestamp__Annotations$0();

__attribute__((unused)) static IOSObjectArray *SCTimestamp__Annotations$1();

@implementation SCTimestamp

- (instancetype)initWithLong:(jlong)millis
        withSCTimeCalculator:(id<SCTimeCalculator>)timeCalculator {
  SCTimestamp_initWithLong_withSCTimeCalculator_(self, millis, timeCalculator);
  return self;
}

- (SCTimestamp * __nonnull)plusDaysWithInt:(jint)days {
  return [((id<SCTimeCalculator>) nil_chk(timeCalculator_)) plusDaysWithInt:days withSCTimestamp:self];
}

- (jint)daysSinceEpoch {
  return [((id<SCTimeCalculator>) nil_chk(timeCalculator_)) getDaysWithSCTimestamp:self];
}

- (jlong)getMillis {
  return millis_;
}

- (SCTimestamp * __nonnull)plusHoursWithInt:(jint)hours {
  return [((id<SCTimeCalculator>) nil_chk(timeCalculator_)) plusHoursWithSCTimestamp:self withInt:hours];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSCTimestamp;", 0x1, 1, 2, -1, -1, 3, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSCTimestamp;", 0x1, 4, 2, -1, -1, 5, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withSCTimeCalculator:);
  methods[1].selector = @selector(plusDaysWithInt:);
  methods[2].selector = @selector(daysSinceEpoch);
  methods[3].selector = @selector(getMillis);
  methods[4].selector = @selector(plusHoursWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeCalculator_", "LSCTimeCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "millis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JLSCTimeCalculator;", "plusDays", "I", (void *)&SCTimestamp__Annotations$0, "plusHours", (void *)&SCTimestamp__Annotations$1 };
  static const J2ObjcClassInfo _SCTimestamp = { "Timestamp", "uk.co.amlcurran.social", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_SCTimestamp;
}

@end

void SCTimestamp_initWithLong_withSCTimeCalculator_(SCTimestamp *self, jlong millis, id<SCTimeCalculator> timeCalculator) {
  NSObject_init(self);
  self->millis_ = millis;
  self->timeCalculator_ = timeCalculator;
}

SCTimestamp *new_SCTimestamp_initWithLong_withSCTimeCalculator_(jlong millis, id<SCTimeCalculator> timeCalculator) {
  J2OBJC_NEW_IMPL(SCTimestamp, initWithLong_withSCTimeCalculator_, millis, timeCalculator)
}

SCTimestamp *create_SCTimestamp_initWithLong_withSCTimeCalculator_(jlong millis, id<SCTimeCalculator> timeCalculator) {
  J2OBJC_CREATE_IMPL(SCTimestamp, initWithLong_withSCTimeCalculator_, millis, timeCalculator)
}

IOSObjectArray *SCTimestamp__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SCTimestamp__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCTimestamp)
