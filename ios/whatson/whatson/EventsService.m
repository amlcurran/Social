//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/EventsService.java
//

#include "CalendarItem.h"
#include "CalendarSlot.h"
#include "CalendarSource.h"
#include "EventsRepository.h"
#include "EventsService.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "TimeCalculator.h"
#include "TimeOfDay.h"
#include "TimeRepository.h"
#include "Timestamp.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"

@interface SCEventsService () {
 @public
  id<SCTimeRepository> timeRepository_;
  id<SCEventsRepository> eventsRepository_;
  id<SCTimeCalculator> timeCalculator_;
}

@end

J2OBJC_FIELD_SETTER(SCEventsService, timeRepository_, id<SCTimeRepository>)
J2OBJC_FIELD_SETTER(SCEventsService, eventsRepository_, id<SCEventsRepository>)
J2OBJC_FIELD_SETTER(SCEventsService, timeCalculator_, id<SCTimeCalculator>)

__attribute__((unused)) static IOSObjectArray *SCEventsService__Annotations$0();

@implementation SCEventsService

- (instancetype)initWithSCTimeRepository:(id<SCTimeRepository>)dateCreator
                  withSCEventsRepository:(id<SCEventsRepository>)eventsRepository
                    withSCTimeCalculator:(id<SCTimeCalculator>)timeCalculator {
  SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(self, dateCreator, eventsRepository, timeCalculator);
  return self;
}

- (SCCalendarSource * __nonnull)getCalendarSourceWithInt:(jint)numberOfDays
                                         withSCTimestamp:(SCTimestamp *)now {
  SCTimestamp *nowTime = [((id<SCTimeCalculator>) nil_chk(timeCalculator_)) startOfToday];
  SCTimestamp *nextWeek = [((SCTimestamp *) nil_chk(nowTime)) plusDaysWithInt:numberOfDays];
  SCTimeOfDay *fivePm = [((id<SCTimeRepository>) nil_chk(timeRepository_)) borderTimeStart];
  SCTimeOfDay *elevenPm = [timeRepository_ borderTimeEnd];
  id<JavaUtilList> calendarItems = [((id<SCEventsRepository>) nil_chk(eventsRepository_)) getCalendarItemsWithSCTimestamp:nowTime withSCTimestamp:nextWeek withSCTimeOfDay:fivePm withSCTimeOfDay:elevenPm];
  UkCoAmlcurranSocialCoreSparseArray *itemArray = new_UkCoAmlcurranSocialCoreSparseArray_initWithInt_(numberOfDays);
  jint epochToNow = [((SCTimestamp *) nil_chk(now)) daysSinceEpoch];
  for (id<SCCalendarItem> __strong item in nil_chk(calendarItems)) {
    jint key = [((SCTimestamp *) nil_chk([((id<SCCalendarItem>) nil_chk(item)) startTime])) daysSinceEpoch] - epochToNow;
    SCCalendarSlot *slot = [itemArray getWithInt:key withId:new_SCCalendarSlot_init()];
    [((SCCalendarSlot *) nil_chk(slot)) addItemWithSCCalendarItem:item];
    [itemArray putWithInt:key withId:slot];
  }
  return new_SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_withSCTimeRepository_(itemArray, numberOfDays, timeCalculator_, timeRepository_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSCCalendarSource;", 0x1, 1, 2, -1, -1, 3, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithSCTimeRepository:withSCEventsRepository:withSCTimeCalculator:);
  methods[1].selector = @selector(getCalendarSourceWithInt:withSCTimestamp:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeRepository_", "LSCTimeRepository;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventsRepository_", "LSCEventsRepository;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeCalculator_", "LSCTimeCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSCTimeRepository;LSCEventsRepository;LSCTimeCalculator;", "getCalendarSource", "ILSCTimestamp;", (void *)&SCEventsService__Annotations$0 };
  static const J2ObjcClassInfo _SCEventsService = { "EventsService", "uk.co.amlcurran.social", ptrTable, methods, fields, 7, 0x1, 2, 3, -1, -1, -1, -1, -1 };
  return &_SCEventsService;
}

@end

void SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(SCEventsService *self, id<SCTimeRepository> dateCreator, id<SCEventsRepository> eventsRepository, id<SCTimeCalculator> timeCalculator) {
  NSObject_init(self);
  self->eventsRepository_ = eventsRepository;
  self->timeRepository_ = dateCreator;
  self->timeCalculator_ = timeCalculator;
}

SCEventsService *new_SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(id<SCTimeRepository> dateCreator, id<SCEventsRepository> eventsRepository, id<SCTimeCalculator> timeCalculator) {
  J2OBJC_NEW_IMPL(SCEventsService, initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_, dateCreator, eventsRepository, timeCalculator)
}

SCEventsService *create_SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(id<SCTimeRepository> dateCreator, id<SCEventsRepository> eventsRepository, id<SCTimeCalculator> timeCalculator) {
  J2OBJC_CREATE_IMPL(SCEventsService, initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_, dateCreator, eventsRepository, timeCalculator)
}

IOSObjectArray *SCEventsService__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCEventsService)
