//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/src/main/java//uk/co/amlcurran/social/EventsService.java
//

#include "CalendarItem.h"
#include "CalendarSlot.h"
#include "CalendarSource.h"
#include "EventsRepository.h"
#include "EventsService.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "TimeCalculator.h"
#include "TimeOfDay.h"
#include "TimeRepository.h"
#include "Timestamp.h"
#include "java/util/List.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

@interface SCEventsService () {
 @public
  id<SCTimeRepository> timeRepository_;
  id<SCEventsRepository> eventsRepository_;
  id<SCTimeCalculator> timeCalculator_;
}

@end

J2OBJC_FIELD_SETTER(SCEventsService, timeRepository_, id<SCTimeRepository>)
J2OBJC_FIELD_SETTER(SCEventsService, eventsRepository_, id<SCEventsRepository>)
J2OBJC_FIELD_SETTER(SCEventsService, timeCalculator_, id<SCTimeCalculator>)

#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

@implementation SCEventsService

- (instancetype)initWithSCTimeRepository:(id<SCTimeRepository>)dateCreator
                  withSCEventsRepository:(id<SCEventsRepository>)eventsRepository
                    withSCTimeCalculator:(id<SCTimeCalculator>)timeCalculator {
  SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(self, dateCreator, eventsRepository, timeCalculator);
  return self;
}

- (SCCalendarSource * __nonnull)getCalendarSourceWithInt:(jint)numberOfDays
                                         withSCTimestamp:(SCTimestamp *)now {
  SCTimestamp *nowTime = [((id<SCTimeCalculator>) nil_chk(timeCalculator_)) startOfToday];
  SCTimestamp *nextWeek = [((SCTimestamp *) nil_chk(nowTime)) plusDaysWithInt:numberOfDays];
  SCTimeOfDay *fivePm = [((id<SCTimeRepository>) nil_chk(timeRepository_)) borderTimeStart];
  SCTimeOfDay *elevenPm = [timeRepository_ borderTimeEnd];
  id<JavaUtilList> calendarItems = [((id<SCEventsRepository>) nil_chk(eventsRepository_)) getCalendarItemsWithSCTimestamp:nowTime withSCTimestamp:nextWeek withSCTimeOfDay:fivePm withSCTimeOfDay:elevenPm];
  UkCoAmlcurranSocialCoreSparseArray *itemArray = new_UkCoAmlcurranSocialCoreSparseArray_initWithInt_(numberOfDays);
  jint epochToNow = [((SCTimestamp *) nil_chk(now)) daysSinceEpoch];
  for (id<SCCalendarItem> __strong item in nil_chk(calendarItems)) {
    jint key = [((SCTimestamp *) nil_chk([((id<SCCalendarItem>) nil_chk(item)) startTime])) daysSinceEpoch] - epochToNow;
    SCCalendarSlot *slot = [itemArray getWithInt:key withId:new_SCCalendarSlot_init()];
    [((SCCalendarSlot *) nil_chk(slot)) addItemWithSCCalendarItem:item];
    [itemArray putWithInt:key withId:slot];
  }
  return new_SCCalendarSource_initWithUkCoAmlcurranSocialCoreSparseArray_withInt_withSCTimeCalculator_(itemArray, numberOfDays, timeCalculator_);
}

+ (IOSObjectArray *)__annotations_getCalendarSourceWithInt_withSCTimestamp_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaxAnnotationNonnull alloc] initWithWhen:JavaxAnnotationMetaWhen_get_ALWAYS()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithSCTimeRepository:withSCEventsRepository:withSCTimeCalculator:", "EventsService", NULL, 0x1, NULL, NULL },
    { "getCalendarSourceWithInt:withSCTimestamp:", "getCalendarSource", "Luk.co.amlcurran.social.CalendarSource;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "timeRepository_", NULL, 0x12, "Luk.co.amlcurran.social.TimeRepository;", NULL, NULL, .constantValue.asLong = 0 },
    { "eventsRepository_", NULL, 0x12, "Luk.co.amlcurran.social.EventsRepository;", NULL, NULL, .constantValue.asLong = 0 },
    { "timeCalculator_", NULL, 0x12, "Luk.co.amlcurran.social.TimeCalculator;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _SCEventsService = { 2, "EventsService", "uk.co.amlcurran.social", NULL, 0x1, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_SCEventsService;
}

@end

void SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(SCEventsService *self, id<SCTimeRepository> dateCreator, id<SCEventsRepository> eventsRepository, id<SCTimeCalculator> timeCalculator) {
  NSObject_init(self);
  self->eventsRepository_ = eventsRepository;
  self->timeRepository_ = dateCreator;
  self->timeCalculator_ = timeCalculator;
}

SCEventsService *new_SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(id<SCTimeRepository> dateCreator, id<SCEventsRepository> eventsRepository, id<SCTimeCalculator> timeCalculator) {
  SCEventsService *self = [SCEventsService alloc];
  SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(self, dateCreator, eventsRepository, timeCalculator);
  return self;
}

SCEventsService *create_SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(id<SCTimeRepository> dateCreator, id<SCEventsRepository> eventsRepository, id<SCTimeCalculator> timeCalculator) {
  return new_SCEventsService_initWithSCTimeRepository_withSCEventsRepository_withSCTimeCalculator_(dateCreator, eventsRepository, timeCalculator);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SCEventsService)
